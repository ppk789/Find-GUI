/*
 * 
 * GNU Find File GUI Utility
 * Phil Peake August 2016
 * License: Apache License V2
 */

import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.net.URI;
import java.net.URISyntaxException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.String;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;

public class FindFilesGUI extends javax.swing.JFrame {
   //Just a GUI for the Unix / Linux "find" command from findutils package.
   //TODO add option to use the locate command. 
   //TODO Add option to open the file
   //TODo Add optoin to show results in a tree view.
    
    Process processFind;
    Process processHelp;
    int crf = 29;
    int ab = 128;
    double tStart = 0;
    double tFinish = 0;
    String command = "";
     
    
    public FindFilesGUI() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Find File Utility");
        DefaultCaret caret = (DefaultCaret)jTextArea2.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    
        
        checkFindPath();
        setPreviewCommand();
        this.getRootPane().setDefaultButton(jBtnFind);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jTextFileNamePattern = new javax.swing.JTextField();
        jBtnFind = new javax.swing.JButton();
        jBtnFindPath = new javax.swing.JButton();
        jTextFind = new javax.swing.JTextField();
        jBtnCancel = new javax.swing.JButton();
        jLabelVCodec = new javax.swing.JLabel();
        jComboType = new javax.swing.JComboBox();
        jComboModifiedTime = new javax.swing.JComboBox();
        jCheckBoxModified = new javax.swing.JCheckBox();
        jCheckBoxPath = new javax.swing.JCheckBox();
        jCheckBoxFollowLink = new javax.swing.JCheckBox();
        jComboBoxFollowLink = new javax.swing.JComboBox<>();
        jTextOtherOptions = new javax.swing.JTextField();
        jCheckBoxOtherOptions = new javax.swing.JCheckBox();
        jBtnHelp = new javax.swing.JButton();
        jBtnBrowse = new javax.swing.JButton();
        jTextFindPath = new javax.swing.JTextField();
        jBtnSave = new javax.swing.JButton();
        jBtnOpen = new javax.swing.JButton();
        jCheckBoxTyp = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonClose = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextFileNamePattern.setToolTipText("e.g.  *.txt,  *.*,  *, ??*.doc : Note: case insensitive");
        jTextFileNamePattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFileNamePatternActionPerformed(evt);
            }
        });
        jTextFileNamePattern.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFileNamePatternKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFileNamePatternKeyReleased(evt);
            }
        });

        jBtnFind.setText("Find");
        jBtnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFindActionPerformed(evt);
            }
        });

        jBtnFindPath.setText("Find Path");
        jBtnFindPath.setToolTipText("Set the path to the find command");
        jBtnFindPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFindPathActionPerformed(evt);
            }
        });

        jTextFind.setToolTipText("Path to the find command");
        jTextFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFindActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        jLabelVCodec.setText("Find file name");
        jLabelVCodec.setToolTipText("Patern to find files for");

        jComboType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any", "Files only", "Folder / Directory only", "Link (Sybmolic Link) only", " " }));
        jComboType.setToolTipText("Choose the type of object to find");
        jComboType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboTypeItemStateChanged(evt);
            }
        });
        jComboType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboTypeActionPerformed(evt);
            }
        });
        jComboType.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboTypePropertyChange(evt);
            }
        });

        jComboModifiedTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Within last 7 days", "Within last 30 days", "Within last 60 days", "Within last 90 days", "Within last year", "Within last 3 years", "Within last 5 years", "Within last 10 years" }));
        jComboModifiedTime.setToolTipText("Choose a modification time");
        jComboModifiedTime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboModifiedTimeItemStateChanged(evt);
            }
        });
        jComboModifiedTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboModifiedTimeActionPerformed(evt);
            }
        });

        jCheckBoxModified.setText("Modified");
        jCheckBoxModified.setToolTipText("Set to choose a modification time");
        jCheckBoxModified.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxModifiedItemStateChanged(evt);
            }
        });
        jCheckBoxModified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxModifiedActionPerformed(evt);
            }
        });

        jCheckBoxPath.setSelected(true);
        jCheckBoxPath.setText("Path");
        jCheckBoxPath.setToolTipText("Choose to set path option");
        jCheckBoxPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPathActionPerformed(evt);
            }
        });

        jCheckBoxFollowLink.setSelected(true);
        jCheckBoxFollowLink.setText("Follow Link?");
        jCheckBoxFollowLink.setToolTipText("Select to enable follow link options");
        jCheckBoxFollowLink.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxFollowLinkStateChanged(evt);
            }
        });
        jCheckBoxFollowLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxFollowLinkActionPerformed(evt);
            }
        });

        jComboBoxFollowLink.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Follow symbolic links (-L)", "Never Follow (-P)", "Do not follow (-H)", " " }));
        jComboBoxFollowLink.setToolTipText("Select whether to follow links");
        jComboBoxFollowLink.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFollowLinkItemStateChanged(evt);
            }
        });
        jComboBoxFollowLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFollowLinkActionPerformed(evt);
            }
        });

        jTextOtherOptions.setText("-print");
        jTextOtherOptions.setToolTipText("Set other options or even full command options e.g. \"-o -path /home/user/.local -prune -o -path /home/user/.wine -prune ");
        jTextOtherOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextOtherOptionsActionPerformed(evt);
            }
        });
        jTextOtherOptions.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextOtherOptionsKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextOtherOptionsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextOtherOptionsKeyReleased(evt);
            }
        });

        jCheckBoxOtherOptions.setSelected(true);
        jCheckBoxOtherOptions.setText("Other Options");
        jCheckBoxOtherOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxOtherOptionsActionPerformed(evt);
            }
        });

        jBtnHelp.setText("Help");
        jBtnHelp.setToolTipText("Shows the Linux \"Find\" manual page.");
        jBtnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnHelpActionPerformed(evt);
            }
        });

        jBtnBrowse.setText("Browse");
        jBtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBrowseActionPerformed(evt);
            }
        });

        jTextFindPath.setText(".");
        jTextFindPath.setToolTipText("Set the path from which to search");
        jTextFindPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFindPathActionPerformed(evt);
            }
        });
        jTextFindPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFindPathKeyPressed(evt);
            }
        });

        jBtnSave.setText("Save");
        jBtnSave.setToolTipText("Save the current \"find\"");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        jBtnOpen.setText("Open");
        jBtnOpen.setToolTipText("Open a saved \"find\"");
        jBtnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnOpenActionPerformed(evt);
            }
        });

        jCheckBoxTyp.setText("Type");
        jCheckBoxTyp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxTypStateChanged(evt);
            }
        });
        jCheckBoxTyp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTypActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setToolTipText("Results window. Right click to copy");
        jTextArea2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextArea2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(3);
        jTextArea1.setToolTipText("Find command preview window");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jCheckBoxPath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCheckBoxFollowLink, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jCheckBoxModified, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCheckBoxOtherOptions, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jCheckBoxTyp)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnFindPath, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelVCodec, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextOtherOptions)
                            .addComponent(jTextFind)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboModifiedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFileNamePattern, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBoxFollowLink, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jTextFindPath, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jBtnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 124, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonClose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnFind, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtnCancel, jBtnFind, jBtnFindPath, jBtnHelp, jBtnOpen, jBtnSave, jButtonClose});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBoxFollowLink, jComboModifiedTime, jComboType});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFileNamePattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVCodec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFollowLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxFollowLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnBrowse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFindPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxTyp)
                    .addComponent(jBtnOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboModifiedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxModified, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextOtherOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxOtherOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnFindPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnFind)
                    .addComponent(jBtnCancel)
                    .addComponent(jButtonClose)
                    .addComponent(jBtnHelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtnCancel, jBtnFind, jBtnHelp});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jComboBoxFollowLink, jComboModifiedTime, jComboType});

        pack();
    }// </editor-fold>//GEN-END:initComponents

   

   private String getOptions() {
       //Get the options for the command string
       //TODo put these into more object oreintated format
    String FindPath = "";
    String followlink = "";
    String SearchPath = "";
    String FindText = "";
    String TypeOptn = "";
    String ModifiedOption = "";
    String OtherOptions = "";
    String RetTxt = "";
    
    
    //Todo set these operations as individual methods so they can be called from multiple locations
    // without duplicating code
    
    if (jTextFind.getText().length() > 0) {
        FindPath = "FindPath," + jTextFind.getText()+"";
    } else {
        FindPath = "FindPath, ";
    }
    
    
    //-------------------------------------------------------
      if (jCheckBoxFollowLink.isSelected()) {
          
          switch(jComboBoxFollowLink.getSelectedIndex()) {
              case 0:
                  followlink = " -L";
                  break;
              case 1:
                  followlink = " -P";
                  break;
              case 2: 
                  followlink = " -H";
                  break;
          }
          
        followlink = "followlink,"+followlink ; 
              
       } else {
          followlink = "followlink ";
      }
        
      //-------------------------------------------------------
      if (jCheckBoxPath.isSelected()) {
                
         
          SearchPath = "SearchPath," + jTextFindPath.getText();
         
      } else {
          SearchPath = "SearchPath, ";
      }
         
      
      
      //--------------------------------------------------------
      
      
      FindText ="FindText,"+    jTextFileNamePattern.getText() + "";
          
      
      
      //--------------------------------------------------------
      
      if (jCheckBoxOtherOptions.isSelected()){
                  
          OtherOptions =  "OtherOptions," + jTextOtherOptions.getText()+"";

      } else {
          OtherOptions = "OtherOptions, ";
      }
      //---------------------------------------------------------
      
      if (jCheckBoxTyp.isSelected()) {
          
          
          switch (jComboType.getSelectedIndex()) {
          case 0:
               TypeOptn = "";
               break;
          case 1:
                TypeOptn = " -type f ";
                break;
          case 2:
                TypeOptn = " -type d ";
                break;
          case 3:
                TypeOptn = " -type l ";
                break;    
          }
          
          TypeOptn = "TypeOptn,"+TypeOptn +" ";
      } else {
          TypeOptn = "TypeOptn, ";
      }
      
      
      //-----------------------------------------------------------
      if (jCheckBoxModified.isSelected()) {
          
          switch (jComboModifiedTime.getSelectedIndex()) {
          case 0:
                ModifiedOption = "";
                break;
          case 1:
                ModifiedOption = " -mtime -7";
                break;
          case 2:
                ModifiedOption = " -mtime -30";
                break;
          case 3:
                ModifiedOption = " -mtime -60";
                break;
          case 4:
                ModifiedOption = " -mtime -90";
                break;
          case 5:
                ModifiedOption = " -mtime -365";
                break;
          case 6:
                ModifiedOption = " -mtime -1095";
                break;
          case 7:
                ModifiedOption = " -mtime -1825";
                break;
          case 8:
                ModifiedOption = " -mtime -3650";
                break;
                
          }
          ModifiedOption = "ModifiedOption," + ModifiedOption + "";
      

      } else {
          ModifiedOption = "ModifiedOption, ";
      }
            
     //Setup the text to write to file
     RetTxt = FindPath+ "\r\n" + followlink+ "\r\n" + SearchPath+ "\r\n" + FindText+ "\r\n" + TypeOptn+ "\r\n" + ModifiedOption + "\r\n" + OtherOptions ;
     return RetTxt;
            
    } 
    
    public void setPreviewCommand(){
        //Updates the preview text field with find command options
        //TODO Probably separate into individual objection functinos
    String FindPath = "";
    String followlink = "";
    String SearchPath = "";
    String FindText = "";
    String TypeOptn = "";
    String ModifiedOption = "";
    String OtherOptions = "-print";
    String Preview = "";
    
           
        
    if (jTextFind.getText().length() > 0) {
        FindPath = jTextFind.getText();
    }
    
      if (jCheckBoxFollowLink.isSelected()) {
           jComboBoxFollowLink.setEnabled(true);
          switch(jComboBoxFollowLink.getSelectedIndex()) {
              case 0:
                  followlink = " -L";
                  break;
              case 1:
                  followlink = " -P";
                  break;
              case 2: 
                  followlink = " -H";
                  break;
          }
          
      }else {
                  jComboBoxFollowLink.setEnabled(false);
              
       }
      //-------------------------------------------------------
      if (jCheckBoxPath.isSelected()) {
          jTextFindPath.setEnabled(true);
          
          if (jCheckBoxPath.isEnabled()) {
          SearchPath = " " + jTextFindPath.getText();
          } 
        } else {
              jTextFindPath.setEnabled(false);
      }
      
      
      //--------------------------------------------------------
      
      if (jTextFileNamePattern.getText().length() > 0) {
          FindText = " -iname "  + jTextFileNamePattern.getText()   ;
      }
      
      //--------------------------------------------------------
      
      if (jCheckBoxOtherOptions.isSelected()){
          jTextOtherOptions.setEnabled(true);
          
          OtherOptions = " " + jTextOtherOptions.getText();
      } else {
          jTextOtherOptions.setEnabled(false);
          OtherOptions = "";
      }
      //---------------------------------------------------------
      
      if (jCheckBoxTyp.isSelected()) {
          jComboType.setEnabled(true);
          
          switch (jComboType.getSelectedIndex()) {
          case 0:
               TypeOptn = "";
               break;
          case 1:
                TypeOptn = " -type f ";
                break;
          case 2:
                TypeOptn = " -type d ";
                break;
          case 3:
                TypeOptn = " -type l ";
                break;    
          }
          
      } else {
         jComboType.setEnabled(false);
          TypeOptn = "";
      }
      
      
      //-----------------------------------------------------------
      if (jCheckBoxModified.isSelected()) {
          jComboModifiedTime.setEnabled(true);
          switch (jComboModifiedTime.getSelectedIndex()) {
          case 0:
                ModifiedOption = "";
                break;
          case 1:
                ModifiedOption = " -mtime -7";
                break;
          case 2:
                ModifiedOption = " -mtime -30";
                break;
                case 3:
                ModifiedOption = " -mtime -60";
                break;
                case 4:
                ModifiedOption = " -mtime -90";
                break;
                case 5:
                ModifiedOption = " -mtime -365";
                break;
                case 6:
                ModifiedOption = " -mtime -1095";
                break;
                case 7:
                ModifiedOption = " -mtime -1825";
                break;
                case 8:
                ModifiedOption = " -mtime -3650";
                break;
                
      }
      } else {
                    jComboModifiedTime.setEnabled(false);
                    ModifiedOption = "";

      }
      
      
    command = FindPath + followlink + SearchPath + TypeOptn + ModifiedOption + FindText + OtherOptions;
    Preview = "Preview:> " + command;
    jTextArea1.setText(Preview);
}
    
    
    private void checkFindPath() {
        //Checks that the "find" command is available on the OS
        File file = new File("FindPath.txt");
        if (file.exists()) {
                try (Scanner input = new Scanner(file)) {
                    while (input.hasNext()) {
                        jTextFind.setText(input.nextLine());
                    }
                } catch (FileNotFoundException ex) {
                Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
              
        }
        
        file = new File("/usr/bin/find");
        if(file.exists()){
            jTextFind.setText("/usr/bin/find");
        }
    }
    
    private void setFindPath(String path) {
        File file = new File("FindPath.txt");
        try {
            PrintWriter output = new PrintWriter(file);
            output.write(jTextFind.getText());
            output.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jBtnFindPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFindPathActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select filepath for find");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("find file (.exe)", "exe");
        fileChooser.setFileFilter(filter);
        if (fileChooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextFind.setText(file.getPath());
            setFindPath(file.getPath());
        }
        
        
    }//GEN-LAST:event_jBtnFindPathActionPerformed

    private void jTextFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFindActionPerformed
    }//GEN-LAST:event_jTextFindActionPerformed

    private void jBtnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFindActionPerformed
       
        setPreviewCommand();
        
        
        if (jTextFind.getText().length() == 0) {
            JOptionPane.showMessageDialog(this,"You are missing the Find path.\r\n You need this to run find!", 
                "No Find", JOptionPane.WARNING_MESSAGE);
        } else {
            jBtnFind.setEnabled(false);
            Thread FindThread = new Thread(new FindThread());
            FindThread.start();
        }
        
        
        
    }//GEN-LAST:event_jBtnFindActionPerformed

   

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        //Run the find process.
        jBtnFind.setEnabled(true);
       try {
       if (processFind.isAlive()){ 
        processFind.destroyForcibly();
       }
       if (processHelp.isAlive()){
        processHelp.destroyForcibly();
       }
       }catch (NullPointerException ex){
           System.out.print("NullPointerException caught");  
       }
        
        jTextArea2.append(">>> Find Cancelled \r\n");
    }//GEN-LAST:event_jBtnCancelActionPerformed

    private void jComboTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboTypeActionPerformed
        setPreviewCommand();
    }//GEN-LAST:event_jComboTypeActionPerformed

    private void jComboModifiedTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboModifiedTimeActionPerformed
        setPreviewCommand();
    }//GEN-LAST:event_jComboModifiedTimeActionPerformed

    private void jCheckBoxModifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxModifiedActionPerformed
        setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxModifiedActionPerformed

    private void jBtnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnHelpActionPerformed
        showHelp();        
               
    }//GEN-LAST:event_jBtnHelpActionPerformed

    private void jTextFileNamePatternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFileNamePatternActionPerformed
        setPreviewCommand();
    }//GEN-LAST:event_jTextFileNamePatternActionPerformed

    private void jTextFileNamePatternKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFileNamePatternKeyReleased
       setPreviewCommand();
    }//GEN-LAST:event_jTextFileNamePatternKeyReleased

    private void jComboBoxFollowLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFollowLinkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFollowLinkActionPerformed

    private void jComboBoxFollowLinkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxFollowLinkItemStateChanged
        setPreviewCommand();
    }//GEN-LAST:event_jComboBoxFollowLinkItemStateChanged

    private void jCheckBoxFollowLinkStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxFollowLinkStateChanged
        setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxFollowLinkStateChanged

    private void jBtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBrowseActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select starting path for find");
        fileChooser.setFileSelectionMode(1);
                if (fileChooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextFindPath.setText(file.getPath());
            setFindPath(file.getPath());
        }
       setPreviewCommand();         
    }//GEN-LAST:event_jBtnBrowseActionPerformed

    private void jTextFindPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFindPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFindPathActionPerformed

    private void jTextOtherOptionsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextOtherOptionsKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextOtherOptionsKeyTyped

    private void jTextOtherOptionsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextOtherOptionsKeyReleased
        // TODO add your handling code here:
        setPreviewCommand();
    }//GEN-LAST:event_jTextOtherOptionsKeyReleased

    private void jComboTypePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboTypePropertyChange
       //setPreviewCommand();
    }//GEN-LAST:event_jComboTypePropertyChange

    private void jComboTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboTypeItemStateChanged
        setPreviewCommand();
    }//GEN-LAST:event_jComboTypeItemStateChanged

    private void jComboModifiedTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboModifiedTimeItemStateChanged
        setPreviewCommand();
    }//GEN-LAST:event_jComboModifiedTimeItemStateChanged

    private void jCheckBoxModifiedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxModifiedItemStateChanged
        setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxModifiedItemStateChanged

    private void jTextOtherOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextOtherOptionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextOtherOptionsActionPerformed

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
        //Save the current find options
        int p = 0;
        File file ;
        String filename = "Find.fnd";
        String txt = "";
        txt = getOptions();         //Gets the entries in the find fields
       
        JFileChooser savefile = new JFileChooser();
        savefile.setSelectedFile(new File(filename));
        savefile.setCurrentDirectory(new java.io.File("."));
        FileNameExtensionFilter findfilter = new FileNameExtensionFilter("find file (.fnd)", "fnd");
        savefile.setFileFilter(findfilter);
        
        
        BufferedWriter writer;
        int sf = savefile.showSaveDialog(null);
        if(sf == JFileChooser.APPROVE_OPTION){
            try {
                file = savefile.getSelectedFile();
                if (file.exists()) {
                     p = JOptionPane.showConfirmDialog(null, "File Exists, Ok to overwrite?","File Exists", JOptionPane.YES_NO_OPTION);
                } 
               if (p == 0) {
                writer = new BufferedWriter(new FileWriter(savefile.getSelectedFile(),false));
                writer.write(txt);
                writer.close();
                  jTextArea2.append(">Command: file saved " + savefile.getSelectedFile() +"\r\n\r\n");
        
               }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else if(sf == JFileChooser.CANCEL_OPTION || p == 1){
        
            jTextArea2.append(">Command: File save has been canceled\r\n");
        }
    
       
    }//GEN-LAST:event_jBtnSaveActionPerformed

    private void jCheckBoxPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPathActionPerformed
        setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxPathActionPerformed

    private void jCheckBoxFollowLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFollowLinkActionPerformed
        setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxFollowLinkActionPerformed

    private void jCheckBoxOtherOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxOtherOptionsActionPerformed
       setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxOtherOptionsActionPerformed

    private void jCheckBoxTypActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTypActionPerformed
      
    }//GEN-LAST:event_jCheckBoxTypActionPerformed

    private void jCheckBoxTypStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxTypStateChanged
         setPreviewCommand();
    }//GEN-LAST:event_jCheckBoxTypStateChanged

    private void jBtnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnOpenActionPerformed
        // Open file dialog and user chooses a stored "find" to open
        //TODO Add the find name to the title bar
        
        List<String> findoptions = new ArrayList<String>();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select find file");
        FileNameExtensionFilter findfilter = new FileNameExtensionFilter("find file (.fnd)", "fnd");
        fileChooser.setFileFilter(findfilter);
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileChooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
           File file = fileChooser.getSelectedFile();
        
            jTextArea2.append(">Command: Open saved find "+ file.getAbsolutePath() +"\r\n\r\n");
            findoptions = readFile(file.getAbsolutePath());
        }
       setGUIFields(findoptions);
       
       setPreviewCommand();         
        
        
    }//GEN-LAST:event_jBtnOpenActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jTextArea2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea2MousePressed
     //Add popup menu to enable copy of file spec
   if (evt.isPopupTrigger()) {
     final JPopupMenu menu;
       menu = new JPopupMenu();
     JMenuItem item;
     item = new JMenuItem(new DefaultEditorKit.CopyAction());
     item.setText("Copy");
     item.setEnabled(jTextArea2.getSelectionStart() != jTextArea2.getSelectionEnd());
     menu.add(item);
     menu.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    }//GEN-LAST:event_jTextArea2MousePressed

    private void jTextOtherOptionsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextOtherOptionsKeyPressed
        //If "Enter" key is pressed then run the find command
        int keyCode = evt.getKeyCode();
       
        
        if (keyCode == KeyEvent.VK_ENTER)
        {
                jBtnFindActionPerformed(null);                                        

        }

        
    }//GEN-LAST:event_jTextOtherOptionsKeyPressed

    private void jTextFileNamePatternKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFileNamePatternKeyPressed
         //If "Enter" key is pressed then run the find command
        int keyCode = evt.getKeyCode();
       
        
        if (keyCode == KeyEvent.VK_ENTER)
        {
                jBtnFindActionPerformed(null);                                        

        }
    }//GEN-LAST:event_jTextFileNamePatternKeyPressed

    private void jTextFindPathKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFindPathKeyPressed
         //If "Enter" key is pressed then run the find command
        int keyCode = evt.getKeyCode();
       
        
        if (keyCode == KeyEvent.VK_ENTER)
        {
                jBtnFindActionPerformed(null);                                        

        }
    }//GEN-LAST:event_jTextFindPathKeyPressed



    private List<String> readFile(String filename){
        //Read the saved "find" file and set the options on the GUI
  List<String> records = new ArrayList<String>();
  try
  {
    BufferedReader reader = new BufferedReader(new FileReader(filename));
    String line;
    while ((line = reader.readLine()) != null)
    {
      records.add(line);
    }
    reader.close();
    return records;
  }
  catch (Exception e)
  {
    System.err.format("Exception occurred trying to read '%s'.", filename);
    e.printStackTrace();
    return null;
  }
}

    private void setGUIFields(List<String> findoptions) {
        //Need to check all this.
        //Sets all the find option fields on the form
        String[] cmd = {};
        String s;
        
        for (int k = 0; k<findoptions.size(); k++ ) {
            cmd = getCommand(findoptions.get(k),",");
       
        
        if (cmd.length == 2) {
                     
         s = cmd[1];
         s = s.trim();
        switch (cmd[0]) {
            case "SearchPath": 
                if (s != "") {
                  jCheckBoxPath.setSelected(true);
                  
                  jTextFindPath.setText(s);
                }
            break;
            case "OtherOptions":
                if (cmd[1] != "" ) {
                    jCheckBoxOtherOptions.setSelected(true);
                    jTextOtherOptions.setText(s);
                }
                break;
            case "TypeOptn":
                if (cmd[1] != "" ){
                    jTextFileNamePattern.setText(s);
                   
                }
                break;
            case "followlink":
                 switch (s) {
                     case "-L":
                         jComboBoxFollowLink.setSelectedIndex(0);
                         break;
                     case "-P":
                         jComboBoxFollowLink.setSelectedIndex(1);
                         break;
                     case "-H":
                         jComboBoxFollowLink.setSelectedIndex(2);
                         break;
                     
                             
                 }
                 break;
                 
            case "ModifiedOption":
                 if (s != "" ) {
                 jCheckBoxModified.setSelected(true);
                    switch (s) {
           case "":
                 jComboModifiedTime.setSelectedIndex(0);
                break;
            case " -mtime -7":
                jComboModifiedTime.setSelectedIndex(1);
                break;
            case " -mtime -30":
                 jComboModifiedTime.setSelectedIndex(2);
                break;
            case " -mtime -60": 
                jComboModifiedTime.setSelectedIndex(3);
                break;
            case " -mtime -90":
                 jComboModifiedTime.setSelectedIndex(4);
                break;
            case " -mtime -365":
                 jComboModifiedTime.setSelectedIndex(5);
                break;
            case " -mtime -1095":
                 jComboModifiedTime.setSelectedIndex(6);
                break;
            case " -mtime -1825":
                 jComboModifiedTime.setSelectedIndex(7);
                break;
            case " -mtime -3650":
                 jComboModifiedTime.setSelectedIndex(8);
                break; 
                    }
                }
                break;
        }
        
                
        }
        } 
    }
    
    class HelpThread implements Runnable {
     // Show the man page, but not very readable.
        @Override
        public void run() {
            String HelpCmd =  jTextFind.getText();
            String inFile = jTextFileNamePattern.getText();
        //    String outFile = jTextSaveFile.getText();
           ShowHelpPage("/usr/bin/man -P cat find" ); 
        }
    }
    public void showHelp(){
        //Open up a web page for help on the find command
        // This should probaby be set in a preference dialog.
        //TODO - Set this up as a preferences option
        int p;
        String Kommand;
        String[] cmdResult;
        String url = "http://www.computerhope.com/unix/ufind.htm"; //Not good to hard code this but...
        
        jTextArea2.append(">Command: Open Web page Manual "+url+"\r\n\r\n");
        Kommand = "Ok to open Web page " + url + "?";
        p = JOptionPane.showConfirmDialog(null, Kommand,"Open Web Page", JOptionPane.YES_NO_OPTION);
        
        if (p == 0) {
        
        if(Desktop.isDesktopSupported()){
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI(url));
            } catch (IOException | URISyntaxException ex) {
                Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);         
            }
        }
        }
        
    }
    
    public void ShowHelpPage(String cmd){
        String Kommand = cmd;  //Vas is das?
        String[] cmdResult;
       try{
            cmdResult = getCommand(Kommand, " "); //tokenise  
            processHelp = new ProcessBuilder(cmdResult).start();
            
            gtStream(processHelp);
            
        
        } catch (IOException ex) {
            Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
            
    
    class FindThread implements Runnable {
       //And find the files in a separate thread
        @Override
        public void run() {
            String FindPath = jTextFind.getText();
            String inFile = jTextFileNamePattern.getText();
        //    String outFile = jTextSaveFile.getText();
           FindFiles(FindPath, inFile ); 
        }
    }

    public void FindFiles (String FindPath, String infile) {
        //Like as a separate thread
        
        String outfile = "";
        String[] cmdresult;
        try {
               jTextArea2.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {


                String fCommand = command;
                jTextArea2.append(">Command: "+fCommand+"\r\n\r\n");

                tStart = System.currentTimeMillis();

                cmdresult = getCommand(command , " ");


                processFind = new ProcessBuilder(cmdresult).start();
                // Debug // jTextArea2.append(Arrays.toString(cmdresult));


                gtStream(processFind);


            } catch (IOException ex) {
                Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(FindFilesGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
                jTextArea2.setCursor(Cursor.getDefaultCursor());
            }
    }
    
    
    private static String[] getCommand(String input, String delim) {
    //Tokenize the find command arguments
    StringTokenizer tokenizer = new StringTokenizer(input,delim);
    String[] result = new String[tokenizer.countTokens()];
    
    for (int i = 0; tokenizer.hasMoreTokens(); i++) {
        result[i] = tokenizer.nextToken();
    }
    return result;
}
    public void gtStream(Process process1) throws IOException, InterruptedException {
        BufferedReader bes = new BufferedReader(new InputStreamReader (process1.getErrorStream()));
        BufferedReader bis = new BufferedReader(new InputStreamReader (process1.getInputStream()));
        String retErrLine = null;
        String retInLine = null;
         long LI = 1;       //This really needs to be fixed
        
      // while (((retErrLine = bes.readLine()) != null || ((retInLine = bis.readLine()) != null ))) {
      
      while ((((retInLine = bis.readLine()) != null ))) {
            
            if (retInLine != null) {
                jTextArea2.append(retInLine+"\r\n");
                 //jTextArea2.update(jTextArea2.getGraphics());
                 //jTextArea2.append("test string\r\n");
                Thread.sleep(LI); //make the thread run faster - go figure
                
                retInLine = null;
            }
            
            if ((((retErrLine = bes.readLine()) != null))) 
            {
                jTextArea2.append(retErrLine+"\r\n");
                //jTextArea2.update(jTextArea2.getGraphics());
                //Thread.sleep(LI);  //make the thread run faster... Just seemed to work
                retErrLine = null;
            }
            
       }
        jTextArea2.append("Exited with error code "+process1.waitFor()+"\r\n");
        tFinish = System.currentTimeMillis();
        jTextArea2.append("Run time: " + ((tFinish-tStart)/1000)+"secs\r\n");
        
        jBtnHelp.setEnabled(true);
        jBtnFind.setEnabled(true);
    }
    
     private String chkExtension (String path) {
        //Not implemented
        if (path.substring(path.lastIndexOf('.')+1).equals("fnd")) {
            return (path);
        } else {
            return (path +".fnd");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindFilesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindFilesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindFilesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindFilesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       

        // Display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FindFilesGUI().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnBrowse;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnFind;
    private javax.swing.JButton jBtnFindPath;
    private javax.swing.JButton jBtnHelp;
    private javax.swing.JButton jBtnOpen;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JCheckBox jCheckBoxFollowLink;
    private javax.swing.JCheckBox jCheckBoxModified;
    private javax.swing.JCheckBox jCheckBoxOtherOptions;
    private javax.swing.JCheckBox jCheckBoxPath;
    private javax.swing.JCheckBox jCheckBoxTyp;
    private javax.swing.JComboBox<String> jComboBoxFollowLink;
    private javax.swing.JComboBox jComboModifiedTime;
    private javax.swing.JComboBox jComboType;
    private javax.swing.JLabel jLabelVCodec;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextFileNamePattern;
    private javax.swing.JTextField jTextFind;
    private javax.swing.JTextField jTextFindPath;
    private javax.swing.JTextField jTextOtherOptions;
    // End of variables declaration//GEN-END:variables
}
